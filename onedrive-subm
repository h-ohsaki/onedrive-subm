#!/usr/bin/env python3
#
# Copy files submitted via OneDrive in normalized names.
# Copyright (c) 2021, Hiroyuki Ohsaki.
# All rights reserved.
#

# version 1.0

from collections import defaultdict
import os
import re
import shutil
import sys
import tkinter
import tkinter.filedialog
import tkinter.messagebox
import tkinter.simpledialog

from perlcompat import die, warn, getopts
#import tbdump

def usage():
    die(f"""\
usage: {sys.argv[0]} [-v] [-d dir]  [file...]
  -v    verbose mode
  -d    output directory (default: renamed)
""")

def pick_outdir():
    """Select the output directory."""
    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()
    return tkinter.simpledialog.askstring(
        title='', prompt="Enter the output directory (default: renamed)")

def pick_files():
    """Select multipe files using filedialog in Tkinter."""
    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()
    return tkinter.filedialog.askopenfilenames(
        title="Select files to normalize")

def parse_basename(base):
    """Parse a file base name BASE possibly ending with the revision
    number.  Return the base name and the revision (starting from 1) as a
    tuple."""
    m = re.search(r'^(.+) (\d)$', base)
    if m:
        base, revision = m.groups()
        return base, int(revision) + 1
    else:
        return base, 1

def parse_filename(name):
    """Parse the file name NAME and return its components as a tuple.  This
    code assumes the first or the first two fields separated by underscores
    are user name.
    e.g.: '山田 太郎_重要なファイル.docx'
          '太郎_山田_重要なファイル.pdf'"""
    m = re.search(r'^([^_]+　[^_]+)_(.+)\.([A-Za-z]+)$', name)
    if m:
        user, base, ext = m.groups()
        user = user.replace('　', ' ')
        base, revision = parse_basename(base)
        return user, base, revision, ext
    m = re.search(r'^([^_]+)_([^_]+)_(.+)\.([A-Za-z]+)$', name)
    if m:
        firstname, lastname, base, ext = m.groups()
        user = f'{lastname} {firstname}'
        base, revision = parse_basename(base)
        return user, base, revision, ext
    warn(f"illegal file name `{name}'.")
    raise ValueError

def guess_id(astr):
    """Extract student ID (either 4 or 8 digits) in string ASTR.  Return the
    last 4-digit of the student ID."""
    m = re.search('\d{9,}', astr)
    if m:
        return None
    m = re.search('(\d{8})', astr)
    if m:
        return m.group(1)[-4:]
    m = re.search('\d{5,}', astr)
    if m:
        return None
    m = re.search('(\d{4})', astr)
    if m:
        return m.group(1)
    return None

def normalized_name(user, base, revision, ext):
    """Generate the normalized name from attributes: USER, BASE, REVISION, and
    EXT."""
    warn(f"normalized_name: {user}, {base}, {revision}, {ext}")
    student_id = guess_id(base)
    if student_id:
        return f'{student_id}-{revision}-{user}-{base}.{ext}'
    else:
        return f'ZZZZ-{revision}-{user}-{base}.{ext}'

def main():
    opt = getopts('vd:') or usage()
    verbose = opt.v
    outdir = opt.d
    files = sys.argv[1:]

    if not outdir:
        # Ask for the output directory. 
        outdir = pick_outdir()
        if not outdir:
            outdir = 'renamed'

    if not files:
	    # Ask for report files to be copied.
        files = pick_files()

    # NOTE: Creation of the output directory is deferred to make it invisible
    # from users. 
    if not os.path.exists(outdir):
        os.mkdir(outdir)

    latest = {}
    for file in files:
        # Just ignore all directories.
        if os.path.isdir(file):
            continue

        # Generate a normalized path name.
        name = os.path.basename(file)
        user, base, revision, ext = parse_filename(name)
        newname = normalized_name(user, base, revision, ext)
        newpath = os.path.join(outdir, newname)

        key = f'{user}-{base}.{ext}'
        if key in latest and latest[key][2] > revision:
            # Skip if a newer revision is already registered.
            continue
        latest[key] = file, newpath, revision

    # Copy all latest files with normalized names.
    for file, newpath, _ in latest.values():
        shutil.copy(file, newpath)

if __name__ == "__main__":
    main()
