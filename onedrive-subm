#!/usr/bin/env python3
#
# Copy files submitted via OneDrive in normalized names.
# Copyright (c) 2021, Hiroyuki Ohsaki.
# All rights reserved.
#

# version 1.0

from collections import defaultdict
import os
import re
import shutil
import sys
import tkinter
import tkinter.filedialog
import tkinter.messagebox
import tkinter.simpledialog

from perlcompat import die, warn, getopts
#import tbdump

def usage():
    die(f"""\
usage: {sys.argv[0]} [-v] [-d dir]  [file...]
  -v    verbose mode
  -d    output directory (default: renamed)
""")

def pick_outdir():
    """Select the output directory."""
    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()
    return tkinter.simpledialog.askstring(
        title='', prompt="Enter the output directory (default: renamed)")

def pick_files():
    """Select multipe files using filedialog in Tkinter."""
    # hide tkinter root window
    root = tkinter.Tk()
    root.withdraw()
    return tkinter.filedialog.askopenfilenames(
        title="Select files to normalize")

def parse_base(base):
    """Parse a file name possibly ending with the revision.  Return the base
    name and the revision (starting from 1) as a tuple."""
    m = re.search(r'^(.+) (\d)$', base)
    if m:
        base, revision = m.groups()
        return base, int(revision) + 1
    else:
        return base, 1

def parse_name(file):
    """Parse the file name FILE and return components as a tuple.  This code
    assumes the first or the first two fields are user name.
    e.g.: '山田 太郎_重要なファイル.docx'
          '太郎_山田_重要なファイル.pdf'"""
    m = re.search(r'^([^_]+　[^_]+)_(.+)\.([A-Za-z]+)$', file)
    if m:
        name, base, ext = m.groups()
        name = name.replace('　', ' ')
        base, revision = parse_base(base)
        return name, base, revision, ext
    m = re.search(r'^([^_]+)_([^_]+)_(.+)\.([A-Za-z]+)$', file)
    if m:
        firstname, lastname, base, ext = m.groups()
        name = f'{lastname} {firstname}'
        base, revision = parse_base(base)
        return name, base, revision, ext
    raise ValueError

def guess_id(astr):
    """Extract student ID (either 4 or 8 digits) in string ASTR.
    Return the 4-digit version of the student ID."""
    m = re.search('\d{9,}', astr)
    if m:
        return None
    m = re.search('(\d{8})', astr)
    if m:
        return m.group(1)[-4:]
    m = re.search('\d{5,}', astr)
    if m:
        return None
    m = re.search('(\d{4})', astr)
    if m:
        return m.group(1)
    return None

def normalized_name(name, base, revision, ext):
    """Generate the normalized name from attributes: NAME, BASE, REVISION, and
    EXT."""
    student_id = guess_id(base)
    if student_id:
        return f'{student_id}_{revision}_{name}_{base}.{ext}'
    return f'ZZZZ_{revision}_{name}_{base}.{ext}'

def main():
    opt = getopts('vd:') or usage()
    verbose = opt.v
    outdir = opt.d if opt.d else pick_outdir()

    if not outdir:
        outdir = 'renamed'
    try:
        os.mkdir(outdir)
    except FileExistsError:
        pass

    files = sys.argv[1:]
    if not files:
        files = pick_files()

    lastpath = None
    for file in files:
        base = os.path.basename(file)
        name, base, revision, ext = parse_name(base)
        newbase = normalized_name(name, base, revision, ext)
        newpath = os.path.join(outdir, newbase)
        shutil.copy(file, newpath)
        # FIXME: this code is redundant but works...
        if revision > 1 and lastpath:
            os.unlink(lastpath)
        lastpath = newpath

if __name__ == "__main__":
    main()
